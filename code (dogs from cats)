{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3362,"databundleVersionId":31148,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-06T06:31:14.051690Z","iopub.execute_input":"2024-09-06T06:31:14.052082Z","iopub.status.idle":"2024-09-06T06:31:15.203776Z","shell.execute_reply.started":"2024-09-06T06:31:14.052052Z","shell.execute_reply":"2024-09-06T06:31:15.202473Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/dogs-vs-cats/test1.zip\n/kaggle/input/dogs-vs-cats/train.zip\n/kaggle/input/dogs-vs-cats/sampleSubmission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"!unzip -qq /kaggle/input/dogs-vs-cats/train.zip","metadata":{"execution":{"iopub.status.busy":"2024-09-06T06:31:15.206080Z","iopub.execute_input":"2024-09-06T06:31:15.206724Z","iopub.status.idle":"2024-09-06T06:31:28.361794Z","shell.execute_reply.started":"2024-09-06T06:31:15.206680Z","shell.execute_reply":"2024-09-06T06:31:28.360105Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import os, shutil, pathlib\n\noriginal_dir = pathlib.Path(\"/kaggle/working/train\")\nnew_base_dir = pathlib.Path(\"/kaggle/working/cats_vs_dogs_small\")\n\ndef make_subset(subset_name, start_index, end_index):\n    for category in (\"cat\", \"dog\"):\n        dir = new_base_dir / subset_name / category\n        print(dir)\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n        fnames = [f\"{category}.{i}.jpg\" for i in range(start_index, end_index)]\n        for fname in fnames:\n            shutil.copyfile(src=original_dir / fname,\n                            dst=dir / fname)\n\nmake_subset(\"train\", start_index=0, end_index=1000)\nmake_subset(\"validation\", start_index=1000, end_index=1500)\nmake_subset(\"test\", start_index=1500, end_index=2500)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T06:31:28.363805Z","iopub.execute_input":"2024-09-06T06:31:28.364324Z","iopub.status.idle":"2024-09-06T06:31:29.146045Z","shell.execute_reply.started":"2024-09-06T06:31:28.364273Z","shell.execute_reply":"2024-09-06T06:31:29.144551Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/working/cats_vs_dogs_small/train/cat\n/kaggle/working/cats_vs_dogs_small/train/dog\n/kaggle/working/cats_vs_dogs_small/validation/cat\n/kaggle/working/cats_vs_dogs_small/validation/dog\n/kaggle/working/cats_vs_dogs_small/test/cat\n/kaggle/working/cats_vs_dogs_small/test/dog\n","output_type":"stream"}]},{"cell_type":"code","source":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\ninputs = keras.Input(shape=(180, 180, 3))\nx = layers.Rescaling(1./255)(inputs)\nx = layers.Conv2D(filters=32, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=64, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=128, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=256, kernel_size=3, activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=2)(x)\nx = layers.Conv2D(filters=256, kernel_size=3, activation=\"relu\")(x)\nx = layers.Flatten()(x)\noutputs = layers.Dense(1, activation=\"sigmoid\")(x)\nmodel = keras.Model(inputs=inputs, outputs=outputs)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T06:31:29.148628Z","iopub.execute_input":"2024-09-06T06:31:29.148982Z","iopub.status.idle":"2024-09-06T06:31:43.474387Z","shell.execute_reply.started":"2024-09-06T06:31:29.148952Z","shell.execute_reply":"2024-09-06T06:31:43.473277Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"2024-09-06 06:31:31.251444: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-09-06 06:31:31.251620: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-09-06 06:31:31.409122: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"model.compile(loss=\"binary_crossentropy\",\n              optimizer=\"rmsprop\",\n              metrics=[\"accuracy\"])","metadata":{"execution":{"iopub.status.busy":"2024-09-06T06:31:43.476040Z","iopub.execute_input":"2024-09-06T06:31:43.476676Z","iopub.status.idle":"2024-09-06T06:31:43.497871Z","shell.execute_reply.started":"2024-09-06T06:31:43.476634Z","shell.execute_reply":"2024-09-06T06:31:43.496634Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.utils import image_dataset_from_directory\n\ntrain_dataset = image_dataset_from_directory(\n    new_base_dir / \"train\",\n    image_size=(180, 180),\n    batch_size=32)\nvalidation_dataset = image_dataset_from_directory(\n    new_base_dir / \"validation\",\n    image_size=(180, 180),\n    batch_size=32)\ntest_dataset = image_dataset_from_directory(\n    new_base_dir / \"test\",\n    image_size=(180, 180),\n    batch_size=32)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T06:31:43.499646Z","iopub.execute_input":"2024-09-06T06:31:43.500826Z","iopub.status.idle":"2024-09-06T06:31:44.002066Z","shell.execute_reply.started":"2024-09-06T06:31:43.500773Z","shell.execute_reply":"2024-09-06T06:31:44.001067Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Found 2000 files belonging to 2 classes.\nFound 1000 files belonging to 2 classes.\nFound 2000 files belonging to 2 classes.\n","output_type":"stream"}]},{"cell_type":"code","source":"callbacks = [\n    keras.callbacks.ModelCheckpoint(\n        filepath=\"convnet_from_scratch.keras\",\n        save_best_only=True,\n        monitor=\"val_loss\")\n]\nhistory = model.fit(\n    train_dataset,\n    epochs=3,\n    validation_data=validation_dataset,\n    callbacks=callbacks)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T06:31:44.003532Z","iopub.execute_input":"2024-09-06T06:31:44.003964Z","iopub.status.idle":"2024-09-06T06:36:20.195921Z","shell.execute_reply.started":"2024-09-06T06:31:44.003925Z","shell.execute_reply":"2024-09-06T06:36:20.194733Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Epoch 1/3\n\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m94s\u001b[0m 1s/step - accuracy: 0.4838 - loss: 0.7003 - val_accuracy: 0.5890 - val_loss: 0.6920\nEpoch 2/3\n\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 1s/step - accuracy: 0.5267 - loss: 0.7033 - val_accuracy: 0.5000 - val_loss: 0.7264\nEpoch 3/3\n\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 1s/step - accuracy: 0.5627 - loss: 0.6886 - val_accuracy: 0.6220 - val_loss: 0.6652\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}